#!/usr/bin/env sh
usage() {
    welcome
    echo
    echo "Usage: grids [-level|-l <level>] [-tips|-t]"
    echo "Options:"
    echo "    -tips, -t  - Show the game tips."
    echo "    -level, -l - Choose level. (levels: 0, 1) (default: 0)"
}

grids="000000000"

steps=0
start_time=0
over=false

show_tips=false
level=0

set_level() {
    case $level in
    1)
    grids="000010000"
    ;;
    *)
    grids="100000000"
    ;;
    esac
}

show_board() {
    cug() {
        # cut grids
        # $1: position
        echo $grids | cut -c$1
    }

    echo
    echo "  abc"
    echo "1 $(cug '1-3')"
    echo "2 $(cug '4-6')"
    echo "3 $(cug '7-9')"
    echo
}

get_input() {
    read_input() {
        echo "Input: \c"
        read inp
    }

    cui() {
        # cut input
        # $1: position
        echo $inp | cut -c$1
    }

    read_input
    err_count=0
    while test -z "$(cui 1 | grep -Ex '[123]')" || test -z "$(cui 2 | grep -Ex '[abc]')"; do
    err_count=$(expr $err_count + 1)
    echo "Unrecognized input: $inp"
    case $err_count in
    1)
    echo 'We can choose a grid with the row id combined with the column id, like `1a`.'
    ;;
    2)
    echo '` (Backtick) is not part of the input.'
    ;;
    3)
    echo "We can hit <ctrl-c> to exit."
    ;;
    *)
    echo "Too much errors."
    exit 1
    ;;
    esac
    read_input
    done

    cti() {
        # character to index
        # $1: character
        case $1 in
        a)
        echo 0
        ;;
        b)
        echo 1
        ;;
        c)
        echo 2
        ;;
        esac
    }

    ro=$(expr $(cui 1) - 1)
    co=$(cti $(cui 2))

    old_grids=$grids
    cuo_offset() {
        # cut old_grids
        # $1: 0-indexed position
        echo $old_grids | cut -c $(expr $1 + 1)
    }

    grids=""
    for i in 0 1 2 3 4 5 6 7 8; do
    rcu=$(expr $i / 3)
    ccu=$(expr $i % 3)
    case $rcu$ccu in
    $ro$co|$(expr $ro + 1)$co|$(expr $ro - 1)$co|$ro$(expr $co + 1)|$ro$(expr $co - 1))
    grids+=$(expr 1 - $(cuo_offset $i))
    ;;
    *)
    grids+=$(cuo_offset $i)
    ;;
    esac
    done

    steps=$(expr $steps + 1)
}

check_state() {
    if test $grids = "000000000"; then
    over=true
    fi
}

any_key() {
    echo "Continue...\c"
    read
}

welcome() {
    echo "Grids: Clear all grids."
    echo "Idea comes from a game that I forgot the name."
}

tips() {
    echo "----"
    echo "Tips"
    echo
    echo "We have a square with 3*3 grids:"
    echo "000"
    echo "000"
    echo "000"
    any_key
    echo
    echo "We can indicate each row with a digit and each column with a letter:"
    echo "  abc"
    echo "1 000"
    echo "2 000"
    echo "3 000"
    any_key
    echo
    echo 'We can choose a grid with the row id combined with the column id, like `1a`:'
    echo "  abc           abc"
    echo '1 100  `1a`   1 010'
    echo "2 000 ------> 2 100"
    echo "3 000         3 000"
    any_key
    echo
    echo "Our goal is to make all grids 0."
    any_key
    echo "----"
}

case $1 in
-h|-help|--help)
usage
exit
;;
esac

while test $# -gt 0; do
case $1 in
-l|-level)
level=$2
shift
;;
-t|-tips)
show_tips=true
;;
*)
echo "Unknown option: $1"
usage
exit 1
;;
esac
shift
done

welcome
any_key
$show_tips && tips
echo
echo "Game start."
any_key

set_level
start_time=$(date +%s)
show_board
while ! $over; do
get_input
show_board
check_state
done

echo "Passed."
echo "Steps: $steps"
echo "Time: $(expr $(date +%s) - $start_time)s"
