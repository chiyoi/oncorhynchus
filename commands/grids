#!/usr/bin/env sh
usage() {
    welcome
    echo
    echo "Usage: grids [-tips|-t]"
    echo "Options:"
    echo "    -tips, -t  - Show the game tips."
}

grids="000000000"

steps=0
start_time=0
over=false

show_tips=false
level=0

set_level() {
    case $level in
    *)
    grids="100000000"
    ;;
    esac
}

show_board() {
    cub() {
        # cut board
        # $1: position
        echo $board | cut -c$1
    }

    echo "  abc"
    echo "1 $(cub '1-3')"
    echo "2 $(cub '4-6')"
    echo "3 $(cub '7-9')"
}

get_input() {
    read_input() {
        echo "Input: \c"
        read inp
    }

    cui() {
        # cut input
        # $1: position
        echo $inp | cut -c$1
    }

    read_input
    err_count=0
    while test -z "$(cui 1 | grep -Ex '[abc]')" || test -z "$(cui 2 | grep -Ex '[123]')"; do
    echo "Unrecognized input: $inp"
    case $err_count in
    0)
    echo 'You can choose a grid with the row id combined with the column id, like `a1`.'
    ;;
    1)
    echo '` (Backtick) is not part of the input.'
    ;;
    2)
    echo "You can hit <ctrl-c> to exit."
    ;;
    *)
    exit 1
    ;;
    esac
    read_input
    done

    cti() {
        # character to index
        # $1: character
        case $1 in
        a)
        echo 0
        ;;
        b)
        echo 2
        ;;
        c)
        echo 3
        ;;
        esac
    }

    toggle() {
        # $1: bit
        
    }

    pos=$(expr $(cui 2) + $(cti $(cui 1)) '*' 3)

    old_grids=$grids
    grids=""
    i=0
    while test $(expr $i < 9) -eq 1; do
    case $i in
    $pos|$(expr $pos - 1)|$(expr $pos + 1)|$(expr $pos - 3)|$(expr $pos + 3))
    grids+=$(expr ! )
    ;;
    esac

    steps=$(expr $steps + 1)
}

# working
turn() {
    tu=${board:$1:1}
    if test $tu -eq 0; then
        board=${board:0:$1}1${board:$(expr $1 + 1):9}
    else
        board=${board:0:$1}0${board:$(expr $1 + 1):9}
    fi
}

update() {
    display
    getCommand
    steps=$(expr $steps + 1)
    turn $chosen
    if test $(expr $p0 - 1) -ge 0; then
        turn $(expr $chosen - 1)
    fi
    if test $(expr $p0 + 1) -le 2; then
        turn $(expr $chosen + 1)
    fi
    if test $(expr $p1 - 1) -ge 0; then
        turn $(expr $chosen - 3)
    fi
    if test $(expr $p1 + 1) -le 2; then
        turn $(expr $chosen + 3)
    fi
    test -z $(echo $board | sed 's/0//g') && clear=true
}

getCommand() {
    errorCount=0
    while :; do
        echo -n "Command: "; read input
        if test -z $input; then
            continue
        fi
        case ${input:0:1} in
            a) p0=0 ;;
            b) p0=1 ;;
            c) p0=2 ;;
            *) p0=-1
        esac
        p1=$(expr ${input:1:1} - 1 2>/dev/null)
        if test $? -eq 2 -o $p1 -gt 3; then
            p1=-1
        fi
        if test $p0 -eq -1 -o $p1 -eq -1; then
            if test $errorCount -eq 0; then
                echo
                echo 'You can choose a grid with the row id combined with the column id, like `a1`.'
                echo
            elif test $errorCount -eq 1; then
                echo
                echo "Can you hear me?"
                echo
            elif test $errorCount -eq 2; then
                echo
                echo "If you don't want to play anymore, just type ctrl-c"
                echo
            else
                exit 1
            fi
            errorCount=$(expr $errorCount + 1)
            continue
        fi
        break
    done
    chosen=$(expr $p0 + $p1 '*' 3)
}
# end working

any_key() {
    echo "Continue...\c"
    read
}

welcome() {
    echo "Grids: Clear all grids."
    echo "Principle is not originated."
}

tips() {
    echo "We have a square with 3*3 grids:"
    echo "100"
    echo "000"
    echo "000"
    any_key
    echo
    echo "We can indicate each row with a letter and each column with a digit:"
    echo "  abc"
    echo "1 100"
    echo "2 000"
    echo "3 000"
    any_key
    echo
    echo 'You can choose a grid with the row id combined with the column id, like `a1`:'
    echo "  abc           abc"
    echo '1 100  `a1`   1 010'
    echo "2 000 ------> 2 100"
    echo "3 000         3 000"
    any_key
    echo
    echo "Our goal is to make all grids 0."
}

case $1 in
-h|-help|--help)
usage
exit
;;
esac

while test $# -gt 0; do
case $1 in
-t|-tips)
show_tips=true
;;
*)
echo "Unknown option: $1"
usage
exit 1
;;
esac

welcome
any_key
echo
$show_tips && tips
echo "Game start."
any_key
echo

set_level
start_time=$(date +%s)
show_board
while ! $over; do
get_input
show_board
check_state
done

echo "Passed."
echo "Steps: $steps"
echo "Time: $(expr $(date +%s) - $start_time)s"
